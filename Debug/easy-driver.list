
easy-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009c8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000c60  08000c60  00010c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000c6c  08000c6c  00010c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c70  08000c70  00010c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000004c  24000000  08000c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  2400004c  08000cc0  0002004c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000068  08000cc0  00020068  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002537  00000000  00000000  0002007a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000005f4  00000000  00000000  000225b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000000f0  00000000  00000000  00022ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000000e8  00000000  00000000  00022c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00028c5c  00000000  00000000  00022d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00001404  00000000  00000000  0004b9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000eaa95  00000000  00000000  0004cde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00137875  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000002b0  00000000  00000000  001378c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400004c 	.word	0x2400004c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08000c48 	.word	0x08000c48

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000050 	.word	0x24000050
 80002d4:	08000c48 	.word	0x08000c48

080002d8 <main>:
#include "../../Drivers/easy-driver/easy_driver.h"


int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af02      	add	r7, sp, #8
	for(int i = 0; i < 1000000; i ++){
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	e002      	b.n	80002ea <main+0x12>
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	3301      	adds	r3, #1
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	4a1c      	ldr	r2, [pc, #112]	; (8000360 <main+0x88>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	ddf8      	ble.n	80002e4 <main+0xc>

	}

	easyGPIOConfig(GPIOA, PIN_1, OUTPUT);
 80002f2:	2201      	movs	r2, #1
 80002f4:	2101      	movs	r1, #1
 80002f6:	481b      	ldr	r0, [pc, #108]	; (8000364 <main+0x8c>)
 80002f8:	f000 f8f3 	bl	80004e2 <easyGPIOConfig>
	easyGPIOConfigFullSet(GPIOE, PIN_3,INPUT, PULLUP, 0, 0);
 80002fc:	2300      	movs	r3, #0
 80002fe:	9301      	str	r3, [sp, #4]
 8000300:	2300      	movs	r3, #0
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	2301      	movs	r3, #1
 8000306:	2200      	movs	r2, #0
 8000308:	2103      	movs	r1, #3
 800030a:	4817      	ldr	r0, [pc, #92]	; (8000368 <main+0x90>)
 800030c:	f000 f900 	bl	8000510 <easyGPIOConfigFullSet>
	easyUSARTConfig(USART1, GPIOB, PIN_14, PIN_15);
 8000310:	230f      	movs	r3, #15
 8000312:	220e      	movs	r2, #14
 8000314:	4915      	ldr	r1, [pc, #84]	; (800036c <main+0x94>)
 8000316:	4816      	ldr	r0, [pc, #88]	; (8000370 <main+0x98>)
 8000318:	f000 fb14 	bl	8000944 <easyUSARTConfig>


	easyGPIOSetState(GPIOA, 1, SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2101      	movs	r1, #1
 8000320:	4810      	ldr	r0, [pc, #64]	; (8000364 <main+0x8c>)
 8000322:	f000 fa63 	bl	80007ec <easyGPIOSetState>
  while (1)
  {

	uint8_t state;
	state = easyGPIOReadState(GPIOE, PIN_3);
 8000326:	2103      	movs	r1, #3
 8000328:	480f      	ldr	r0, [pc, #60]	; (8000368 <main+0x90>)
 800032a:	f000 fa82 	bl	8000832 <easyGPIOReadState>
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
	if(state == 0){
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d103      	bne.n	8000340 <main+0x68>
		easyGPIOToggle(GPIOA, PIN_1);
 8000338:	2101      	movs	r1, #1
 800033a:	480a      	ldr	r0, [pc, #40]	; (8000364 <main+0x8c>)
 800033c:	f000 facd 	bl	80008da <easyGPIOToggle>
	}
	easyUSARTSendString(USART1, "deu certo\n");
 8000340:	490c      	ldr	r1, [pc, #48]	; (8000374 <main+0x9c>)
 8000342:	480b      	ldr	r0, [pc, #44]	; (8000370 <main+0x98>)
 8000344:	f000 fc04 	bl	8000b50 <easyUSARTSendString>
	for(int i = 0; i < 1000000; i ++){
 8000348:	2300      	movs	r3, #0
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	e002      	b.n	8000354 <main+0x7c>
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	3301      	adds	r3, #1
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	4a02      	ldr	r2, [pc, #8]	; (8000360 <main+0x88>)
 8000358:	4293      	cmp	r3, r2
 800035a:	ddf8      	ble.n	800034e <main+0x76>
  {
 800035c:	e7e3      	b.n	8000326 <main+0x4e>
 800035e:	bf00      	nop
 8000360:	000f423f 	.word	0x000f423f
 8000364:	58020000 	.word	0x58020000
 8000368:	58021000 	.word	0x58021000
 800036c:	58020400 	.word	0x58020400
 8000370:	40011000 	.word	0x40011000
 8000374:	08000c60 	.word	0x08000c60

08000378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800037c:	4b39      	ldr	r3, [pc, #228]	; (8000464 <SystemInit+0xec>)
 800037e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000382:	4a38      	ldr	r2, [pc, #224]	; (8000464 <SystemInit+0xec>)
 8000384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800038c:	4b36      	ldr	r3, [pc, #216]	; (8000468 <SystemInit+0xf0>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f003 030f 	and.w	r3, r3, #15
 8000394:	2b06      	cmp	r3, #6
 8000396:	d807      	bhi.n	80003a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000398:	4b33      	ldr	r3, [pc, #204]	; (8000468 <SystemInit+0xf0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f023 030f 	bic.w	r3, r3, #15
 80003a0:	4a31      	ldr	r2, [pc, #196]	; (8000468 <SystemInit+0xf0>)
 80003a2:	f043 0307 	orr.w	r3, r3, #7
 80003a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003a8:	4b30      	ldr	r3, [pc, #192]	; (800046c <SystemInit+0xf4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a2f      	ldr	r2, [pc, #188]	; (800046c <SystemInit+0xf4>)
 80003ae:	f043 0301 	orr.w	r3, r3, #1
 80003b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003b4:	4b2d      	ldr	r3, [pc, #180]	; (800046c <SystemInit+0xf4>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ba:	4b2c      	ldr	r3, [pc, #176]	; (800046c <SystemInit+0xf4>)
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	492b      	ldr	r1, [pc, #172]	; (800046c <SystemInit+0xf4>)
 80003c0:	4b2b      	ldr	r3, [pc, #172]	; (8000470 <SystemInit+0xf8>)
 80003c2:	4013      	ands	r3, r2
 80003c4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003c6:	4b28      	ldr	r3, [pc, #160]	; (8000468 <SystemInit+0xf0>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f003 0308 	and.w	r3, r3, #8
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d007      	beq.n	80003e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003d2:	4b25      	ldr	r3, [pc, #148]	; (8000468 <SystemInit+0xf0>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f023 030f 	bic.w	r3, r3, #15
 80003da:	4a23      	ldr	r2, [pc, #140]	; (8000468 <SystemInit+0xf0>)
 80003dc:	f043 0307 	orr.w	r3, r3, #7
 80003e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003e2:	4b22      	ldr	r3, [pc, #136]	; (800046c <SystemInit+0xf4>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003e8:	4b20      	ldr	r3, [pc, #128]	; (800046c <SystemInit+0xf4>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80003ee:	4b1f      	ldr	r3, [pc, #124]	; (800046c <SystemInit+0xf4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80003f4:	4b1d      	ldr	r3, [pc, #116]	; (800046c <SystemInit+0xf4>)
 80003f6:	4a1f      	ldr	r2, [pc, #124]	; (8000474 <SystemInit+0xfc>)
 80003f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80003fa:	4b1c      	ldr	r3, [pc, #112]	; (800046c <SystemInit+0xf4>)
 80003fc:	4a1e      	ldr	r2, [pc, #120]	; (8000478 <SystemInit+0x100>)
 80003fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000400:	4b1a      	ldr	r3, [pc, #104]	; (800046c <SystemInit+0xf4>)
 8000402:	4a1e      	ldr	r2, [pc, #120]	; (800047c <SystemInit+0x104>)
 8000404:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000406:	4b19      	ldr	r3, [pc, #100]	; (800046c <SystemInit+0xf4>)
 8000408:	2200      	movs	r2, #0
 800040a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800040c:	4b17      	ldr	r3, [pc, #92]	; (800046c <SystemInit+0xf4>)
 800040e:	4a1b      	ldr	r2, [pc, #108]	; (800047c <SystemInit+0x104>)
 8000410:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000412:	4b16      	ldr	r3, [pc, #88]	; (800046c <SystemInit+0xf4>)
 8000414:	2200      	movs	r2, #0
 8000416:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <SystemInit+0xf4>)
 800041a:	4a18      	ldr	r2, [pc, #96]	; (800047c <SystemInit+0x104>)
 800041c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <SystemInit+0xf4>)
 8000420:	2200      	movs	r2, #0
 8000422:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000424:	4b11      	ldr	r3, [pc, #68]	; (800046c <SystemInit+0xf4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a10      	ldr	r2, [pc, #64]	; (800046c <SystemInit+0xf4>)
 800042a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800042e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000430:	4b0e      	ldr	r3, [pc, #56]	; (800046c <SystemInit+0xf4>)
 8000432:	2200      	movs	r2, #0
 8000434:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000436:	4b12      	ldr	r3, [pc, #72]	; (8000480 <SystemInit+0x108>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x10c>)
 800043c:	4013      	ands	r3, r2
 800043e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000442:	d202      	bcs.n	800044a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000444:	4b10      	ldr	r3, [pc, #64]	; (8000488 <SystemInit+0x110>)
 8000446:	2201      	movs	r2, #1
 8000448:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <SystemInit+0x114>)
 800044c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000450:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000452:	4b04      	ldr	r3, [pc, #16]	; (8000464 <SystemInit+0xec>)
 8000454:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000458:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800045a:	bf00      	nop
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	e000ed00 	.word	0xe000ed00
 8000468:	52002000 	.word	0x52002000
 800046c:	58024400 	.word	0x58024400
 8000470:	eaf6ed7f 	.word	0xeaf6ed7f
 8000474:	02020200 	.word	0x02020200
 8000478:	01ff0000 	.word	0x01ff0000
 800047c:	01010280 	.word	0x01010280
 8000480:	5c001000 	.word	0x5c001000
 8000484:	ffff0000 	.word	0xffff0000
 8000488:	51008108 	.word	0x51008108
 800048c:	52004000 	.word	0x52004000

08000490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000494:	f7ff ff70 	bl	8000378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800049a:	490d      	ldr	r1, [pc, #52]	; (80004d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800049c:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a0:	e002      	b.n	80004a8 <LoopCopyDataInit>

080004a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a6:	3304      	adds	r3, #4

080004a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ac:	d3f9      	bcc.n	80004a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004b0:	4c0a      	ldr	r4, [pc, #40]	; (80004dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b4:	e001      	b.n	80004ba <LoopFillZerobss>

080004b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b8:	3204      	adds	r2, #4

080004ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004bc:	d3fb      	bcc.n	80004b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004be:	f000 fb9f 	bl	8000c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004c2:	f7ff ff09 	bl	80002d8 <main>
  bx  lr
 80004c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80004cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80004d0:	2400004c 	.word	0x2400004c
  ldr r2, =_sidata
 80004d4:	08000c74 	.word	0x08000c74
  ldr r2, =_sbss
 80004d8:	2400004c 	.word	0x2400004c
  ldr r4, =_ebss
 80004dc:	24000068 	.word	0x24000068

080004e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004e0:	e7fe      	b.n	80004e0 <ADC3_IRQHandler>

080004e2 <easyGPIOConfig>:
#endif



void easyGPIOConfig(GPIO_TypeDef *GPIO_Group, enum gpio_pin Pin, enum gpio_mode Mode)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b084      	sub	sp, #16
 80004e6:	af02      	add	r7, sp, #8
 80004e8:	6078      	str	r0, [r7, #4]
 80004ea:	460b      	mov	r3, r1
 80004ec:	807b      	strh	r3, [r7, #2]
 80004ee:	4613      	mov	r3, r2
 80004f0:	707b      	strb	r3, [r7, #1]
	easyGPIOConfigFullSet(GPIO_Group, Pin, Mode, NOPULL, OUT_PUSH_PULL, OUT_FREQ_HIGH);
 80004f2:	787a      	ldrb	r2, [r7, #1]
 80004f4:	8879      	ldrh	r1, [r7, #2]
 80004f6:	2302      	movs	r3, #2
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2300      	movs	r3, #0
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f000 f805 	bl	8000510 <easyGPIOConfigFullSet>

}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <easyGPIOConfigFullSet>:


void easyGPIOConfigFullSet(GPIO_TypeDef *GPIO_Group, enum gpio_pin Pin, enum gpio_mode Mode,
		enum gpio_pp_pd PUPD, enum gpio_otyper Otyper,
		enum gpio_ospeed Ospeed)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	4608      	mov	r0, r1
 800051a:	4611      	mov	r1, r2
 800051c:	461a      	mov	r2, r3
 800051e:	4603      	mov	r3, r0
 8000520:	807b      	strh	r3, [r7, #2]
 8000522:	460b      	mov	r3, r1
 8000524:	707b      	strb	r3, [r7, #1]
 8000526:	4613      	mov	r3, r2
 8000528:	703b      	strb	r3, [r7, #0]

	easyGPIOCheckClock(GPIO_Group);
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f000 f928 	bl	8000780 <easyGPIOCheckClock>

	if(Mode == INPUT)
 8000530:	787b      	ldrb	r3, [r7, #1]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d114      	bne.n	8000560 <easyGPIOConfigFullSet+0x50>
	{
		easyClearBit(&GPIO_Group->MODER, (Pin+Pin+1U));
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	887b      	ldrh	r3, [r7, #2]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	b2db      	uxtb	r3, r3
 8000540:	3301      	adds	r3, #1
 8000542:	b2db      	uxtb	r3, r3
 8000544:	4619      	mov	r1, r3
 8000546:	4610      	mov	r0, r2
 8000548:	f000 fb19 	bl	8000b7e <easyClearBit>
		easyClearBit(&GPIO_Group->MODER, (Pin+Pin));
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	887b      	ldrh	r3, [r7, #2]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4619      	mov	r1, r3
 8000558:	4610      	mov	r0, r2
 800055a:	f000 fb10 	bl	8000b7e <easyClearBit>
 800055e:	e0b6      	b.n	80006ce <easyGPIOConfigFullSet+0x1be>
	}
	else if(Mode == OUTPUT)
 8000560:	787b      	ldrb	r3, [r7, #1]
 8000562:	2b01      	cmp	r3, #1
 8000564:	f040 809c 	bne.w	80006a0 <easyGPIOConfigFullSet+0x190>
	{
		easyClearBit(&GPIO_Group->MODER, (Pin+Pin+1U));//GPIO_Group->MODER &= ~(1UL << (Pin+Pin+1U));
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	887b      	ldrh	r3, [r7, #2]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	b2db      	uxtb	r3, r3
 8000572:	3301      	adds	r3, #1
 8000574:	b2db      	uxtb	r3, r3
 8000576:	4619      	mov	r1, r3
 8000578:	4610      	mov	r0, r2
 800057a:	f000 fb00 	bl	8000b7e <easyClearBit>
		easySetBit(&GPIO_Group->MODER, (Pin+Pin));
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	887b      	ldrh	r3, [r7, #2]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	b2db      	uxtb	r3, r3
 8000588:	4619      	mov	r1, r3
 800058a:	4610      	mov	r0, r2
 800058c:	f000 fb0d 	bl	8000baa <easySetBit>

		if(Otyper == OUT_PUSH_PULL) easyClearBit(&GPIO_Group->OTYPER , Pin); //GPIO_Group->OTYPER &= ~(1UL << (Pin));
 8000590:	7c3b      	ldrb	r3, [r7, #16]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d108      	bne.n	80005a8 <easyGPIOConfigFullSet+0x98>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3304      	adds	r3, #4
 800059a:	887a      	ldrh	r2, [r7, #2]
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	4611      	mov	r1, r2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 faec 	bl	8000b7e <easyClearBit>
 80005a6:	e007      	b.n	80005b8 <easyGPIOConfigFullSet+0xa8>
		else easySetBit(&GPIO_Group->OTYPER, Pin); //GPIO_Group->OTYPER |= (1UL << (Pin));
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3304      	adds	r3, #4
 80005ac:	887a      	ldrh	r2, [r7, #2]
 80005ae:	b2d2      	uxtb	r2, r2
 80005b0:	4611      	mov	r1, r2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 faf9 	bl	8000baa <easySetBit>

		switch(Ospeed)
 80005b8:	7d3b      	ldrb	r3, [r7, #20]
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	f200 8087 	bhi.w	80006ce <easyGPIOConfigFullSet+0x1be>
 80005c0:	a201      	add	r2, pc, #4	; (adr r2, 80005c8 <easyGPIOConfigFullSet+0xb8>)
 80005c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c6:	bf00      	nop
 80005c8:	080005d9 	.word	0x080005d9
 80005cc:	0800060b 	.word	0x0800060b
 80005d0:	0800063d 	.word	0x0800063d
 80005d4:	0800066f 	.word	0x0800066f
		{
			case OUT_FREQ_LOW:
				easyClearBit(&GPIO_Group->OSPEEDR, (Pin+Pin+1U));
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f103 0208 	add.w	r2, r3, #8
 80005de:	887b      	ldrh	r3, [r7, #2]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	3301      	adds	r3, #1
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	4619      	mov	r1, r3
 80005ec:	4610      	mov	r0, r2
 80005ee:	f000 fac6 	bl	8000b7e <easyClearBit>
				easyClearBit(&GPIO_Group->OSPEEDR, (Pin+Pin));
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f103 0208 	add.w	r2, r3, #8
 80005f8:	887b      	ldrh	r3, [r7, #2]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	4619      	mov	r1, r3
 8000602:	4610      	mov	r0, r2
 8000604:	f000 fabb 	bl	8000b7e <easyClearBit>
				break;
 8000608:	e061      	b.n	80006ce <easyGPIOConfigFullSet+0x1be>
			case OUT_FREQ_MEDIUM:
				easyClearBit(&GPIO_Group->OSPEEDR, (Pin+Pin+1U));
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f103 0208 	add.w	r2, r3, #8
 8000610:	887b      	ldrh	r3, [r7, #2]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	b2db      	uxtb	r3, r3
 8000618:	3301      	adds	r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	4610      	mov	r0, r2
 8000620:	f000 faad 	bl	8000b7e <easyClearBit>
				easySetBit(&GPIO_Group->OSPEEDR, (Pin+Pin));
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f103 0208 	add.w	r2, r3, #8
 800062a:	887b      	ldrh	r3, [r7, #2]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	4619      	mov	r1, r3
 8000634:	4610      	mov	r0, r2
 8000636:	f000 fab8 	bl	8000baa <easySetBit>
				break;
 800063a:	e048      	b.n	80006ce <easyGPIOConfigFullSet+0x1be>
			case OUT_FREQ_HIGH:
				easySetBit(&GPIO_Group->OSPEEDR, (Pin+Pin+1U));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f103 0208 	add.w	r2, r3, #8
 8000642:	887b      	ldrh	r3, [r7, #2]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	b2db      	uxtb	r3, r3
 800064a:	3301      	adds	r3, #1
 800064c:	b2db      	uxtb	r3, r3
 800064e:	4619      	mov	r1, r3
 8000650:	4610      	mov	r0, r2
 8000652:	f000 faaa 	bl	8000baa <easySetBit>
				easyClearBit(&GPIO_Group->OSPEEDR, (Pin+Pin));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f103 0208 	add.w	r2, r3, #8
 800065c:	887b      	ldrh	r3, [r7, #2]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	b2db      	uxtb	r3, r3
 8000664:	4619      	mov	r1, r3
 8000666:	4610      	mov	r0, r2
 8000668:	f000 fa89 	bl	8000b7e <easyClearBit>
				break;
 800066c:	e02f      	b.n	80006ce <easyGPIOConfigFullSet+0x1be>
			case OUT_FREQ_VERY_HIGH:
				easySetBit(&GPIO_Group->OSPEEDR, (Pin+Pin+1U));
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f103 0208 	add.w	r2, r3, #8
 8000674:	887b      	ldrh	r3, [r7, #2]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	b2db      	uxtb	r3, r3
 800067c:	3301      	adds	r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4619      	mov	r1, r3
 8000682:	4610      	mov	r0, r2
 8000684:	f000 fa91 	bl	8000baa <easySetBit>
				easySetBit(&GPIO_Group->OSPEEDR, (Pin+Pin));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f103 0208 	add.w	r2, r3, #8
 800068e:	887b      	ldrh	r3, [r7, #2]
 8000690:	b2db      	uxtb	r3, r3
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	b2db      	uxtb	r3, r3
 8000696:	4619      	mov	r1, r3
 8000698:	4610      	mov	r0, r2
 800069a:	f000 fa86 	bl	8000baa <easySetBit>
				break;
 800069e:	e016      	b.n	80006ce <easyGPIOConfigFullSet+0x1be>
				//GPIO_Group->OSPEEDR |= (1UL<<(Pin+Pin+1U));
				//GPIO_Group->OSPEEDR &= ~(1UL << (Pin+Pin));
		}
	}
	else if(Mode == ALTERNATE_FUNCTION)
 80006a0:	787b      	ldrb	r3, [r7, #1]
 80006a2:	2b10      	cmp	r3, #16
 80006a4:	d113      	bne.n	80006ce <easyGPIOConfigFullSet+0x1be>
	{
		easySetBit(&GPIO_Group->MODER, (Pin+Pin+1));
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	887b      	ldrh	r3, [r7, #2]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	3301      	adds	r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4619      	mov	r1, r3
 80006b6:	4610      	mov	r0, r2
 80006b8:	f000 fa77 	bl	8000baa <easySetBit>
		easyClearBit(&GPIO_Group->MODER, (Pin+Pin));
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	887b      	ldrh	r3, [r7, #2]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4619      	mov	r1, r3
 80006c8:	4610      	mov	r0, r2
 80006ca:	f000 fa58 	bl	8000b7e <easyClearBit>
	}

	switch(PUPD)
 80006ce:	783b      	ldrb	r3, [r7, #0]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	d038      	beq.n	8000746 <easyGPIOConfigFullSet+0x236>
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	dc4f      	bgt.n	8000778 <easyGPIOConfigFullSet+0x268>
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <easyGPIOConfigFullSet+0x1d2>
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d019      	beq.n	8000714 <easyGPIOConfigFullSet+0x204>
			break;
			//GPIO_Group->PUPDR &= ~(1UL<<(Pin+Pin+1U));
			//GPIO_Group->PUPDR &= ~(1UL<<(Pin+Pin));
	}

}
 80006e0:	e04a      	b.n	8000778 <easyGPIOConfigFullSet+0x268>
			easyClearBit(&GPIO_Group->PUPDR, (Pin+Pin+1U));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f103 020c 	add.w	r2, r3, #12
 80006e8:	887b      	ldrh	r3, [r7, #2]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	3301      	adds	r3, #1
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4619      	mov	r1, r3
 80006f6:	4610      	mov	r0, r2
 80006f8:	f000 fa41 	bl	8000b7e <easyClearBit>
			easyClearBit(&GPIO_Group->PUPDR, (Pin+Pin));
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f103 020c 	add.w	r2, r3, #12
 8000702:	887b      	ldrh	r3, [r7, #2]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	4610      	mov	r0, r2
 800070e:	f000 fa36 	bl	8000b7e <easyClearBit>
			break;
 8000712:	e031      	b.n	8000778 <easyGPIOConfigFullSet+0x268>
			easyClearBit(&GPIO_Group->PUPDR, (Pin+Pin+1U));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f103 020c 	add.w	r2, r3, #12
 800071a:	887b      	ldrh	r3, [r7, #2]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	b2db      	uxtb	r3, r3
 8000722:	3301      	adds	r3, #1
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4619      	mov	r1, r3
 8000728:	4610      	mov	r0, r2
 800072a:	f000 fa28 	bl	8000b7e <easyClearBit>
			easySetBit(&GPIO_Group->PUPDR, (Pin+Pin));
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f103 020c 	add.w	r2, r3, #12
 8000734:	887b      	ldrh	r3, [r7, #2]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	4610      	mov	r0, r2
 8000740:	f000 fa33 	bl	8000baa <easySetBit>
			break;
 8000744:	e018      	b.n	8000778 <easyGPIOConfigFullSet+0x268>
			easySetBit(&GPIO_Group->PUPDR, (Pin+Pin+1U));
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f103 020c 	add.w	r2, r3, #12
 800074c:	887b      	ldrh	r3, [r7, #2]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	b2db      	uxtb	r3, r3
 8000754:	3301      	adds	r3, #1
 8000756:	b2db      	uxtb	r3, r3
 8000758:	4619      	mov	r1, r3
 800075a:	4610      	mov	r0, r2
 800075c:	f000 fa25 	bl	8000baa <easySetBit>
			easyClearBit(&GPIO_Group->PUPDR, (Pin+Pin));
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f103 020c 	add.w	r2, r3, #12
 8000766:	887b      	ldrh	r3, [r7, #2]
 8000768:	b2db      	uxtb	r3, r3
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4619      	mov	r1, r3
 8000770:	4610      	mov	r0, r2
 8000772:	f000 fa04 	bl	8000b7e <easyClearBit>
			break;
 8000776:	bf00      	nop
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <easyGPIOCheckClock>:

void easyGPIOCheckClock(GPIO_TypeDef *GPIO_Group)	//it enables the gpiogroup clock
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	if (GPIO_Group->OTYPER == GPIO_Group->MODER)	//check if its off
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d120      	bne.n	80007d6 <easyGPIOCheckClock+0x56>
	{
		unsigned int N = sizeof(ref_gpio_group)/sizeof(ref_gpio_group[0]);
 8000794:	230b      	movs	r3, #11
 8000796:	60bb      	str	r3, [r7, #8]
		for(uint8_t i = 0; i < N; i++)
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]
 800079c:	e017      	b.n	80007ce <easyGPIOCheckClock+0x4e>
		{
			if(GPIO_Group == ref_gpio_group[i]){
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	4a10      	ldr	r2, [pc, #64]	; (80007e4 <easyGPIOCheckClock+0x64>)
 80007a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d10d      	bne.n	80007c8 <easyGPIOCheckClock+0x48>
				RCC->AHB4ENR |= (1<<i); //Habilita o clock do GPIO (H7 series)
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <easyGPIOCheckClock+0x68>)
 80007ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b2:	7bfa      	ldrb	r2, [r7, #15]
 80007b4:	2101      	movs	r1, #1
 80007b6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <easyGPIOCheckClock+0x68>)
 80007be:	430b      	orrs	r3, r1
 80007c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
				break;
 80007c4:	bf00      	nop
			}
		}
	}
}
 80007c6:	e006      	b.n	80007d6 <easyGPIOCheckClock+0x56>
		for(uint8_t i = 0; i < N; i++)
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	3301      	adds	r3, #1
 80007cc:	73fb      	strb	r3, [r7, #15]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	68ba      	ldr	r2, [r7, #8]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d8e3      	bhi.n	800079e <easyGPIOCheckClock+0x1e>
}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	24000000 	.word	0x24000000
 80007e8:	58024400 	.word	0x58024400

080007ec <easyGPIOSetState>:

void easyGPIOSetState(GPIO_TypeDef *GPIO_Group, enum gpio_pin Pin, uint8_t state)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	807b      	strh	r3, [r7, #2]
 80007f8:	4613      	mov	r3, r2
 80007fa:	707b      	strb	r3, [r7, #1]
	  if(state == 0) easySetBit(&GPIO_Group->BSRR, (Pin + 16)); //reseta
 80007fc:	787b      	ldrb	r3, [r7, #1]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10b      	bne.n	800081a <easyGPIOSetState+0x2e>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f103 0218 	add.w	r2, r3, #24
 8000808:	887b      	ldrh	r3, [r7, #2]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	3310      	adds	r3, #16
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4619      	mov	r1, r3
 8000812:	4610      	mov	r0, r2
 8000814:	f000 f9c9 	bl	8000baa <easySetBit>
	  else easySetBit(&GPIO_Group->BSRR, (Pin));
}
 8000818:	e007      	b.n	800082a <easyGPIOSetState+0x3e>
	  else easySetBit(&GPIO_Group->BSRR, (Pin));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3318      	adds	r3, #24
 800081e:	887a      	ldrh	r2, [r7, #2]
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f9c0 	bl	8000baa <easySetBit>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <easyGPIOReadState>:

uint8_t easyGPIOReadState(GPIO_TypeDef *GPIO_Group, enum gpio_pin Pin){
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	460b      	mov	r3, r1
 800083c:	807b      	strh	r3, [r7, #2]

	uint8_t state;

	if(easyReadBit(&GPIO_Group->MODER, (Pin+Pin+1)) == 0U && easyReadBit(&GPIO_Group->MODER, (Pin+Pin)) == 0U)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	3301      	adds	r3, #1
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4619      	mov	r1, r3
 800084e:	4610      	mov	r0, r2
 8000850:	f000 f9c0 	bl	8000bd4 <easyReadBit>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d116      	bne.n	8000888 <easyGPIOReadState+0x56>
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	887b      	ldrh	r3, [r7, #2]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4619      	mov	r1, r3
 8000866:	4610      	mov	r0, r2
 8000868:	f000 f9b4 	bl	8000bd4 <easyReadBit>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d10a      	bne.n	8000888 <easyGPIOReadState+0x56>
	{	//INPUT
		state = easyReadBit(&GPIO_Group->IDR, Pin);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3310      	adds	r3, #16
 8000876:	887a      	ldrh	r2, [r7, #2]
 8000878:	b2d2      	uxtb	r2, r2
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f9a9 	bl	8000bd4 <easyReadBit>
 8000882:	4603      	mov	r3, r0
 8000884:	73fb      	strb	r3, [r7, #15]
 8000886:	e023      	b.n	80008d0 <easyGPIOReadState+0x9e>
	}
	else if(easyReadBit(&GPIO_Group->MODER, (Pin+Pin+1)) == 0U && easyReadBit(&GPIO_Group->MODER, (Pin+Pin)) == 1U)
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	887b      	ldrh	r3, [r7, #2]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	b2db      	uxtb	r3, r3
 8000892:	3301      	adds	r3, #1
 8000894:	b2db      	uxtb	r3, r3
 8000896:	4619      	mov	r1, r3
 8000898:	4610      	mov	r0, r2
 800089a:	f000 f99b 	bl	8000bd4 <easyReadBit>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d115      	bne.n	80008d0 <easyGPIOReadState+0x9e>
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	887b      	ldrh	r3, [r7, #2]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4619      	mov	r1, r3
 80008b0:	4610      	mov	r0, r2
 80008b2:	f000 f98f 	bl	8000bd4 <easyReadBit>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d109      	bne.n	80008d0 <easyGPIOReadState+0x9e>
	{	//OUTPUT
		state = easyReadBit(&GPIO_Group->ODR, Pin);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3314      	adds	r3, #20
 80008c0:	887a      	ldrh	r2, [r7, #2]
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f984 	bl	8000bd4 <easyReadBit>
 80008cc:	4603      	mov	r3, r0
 80008ce:	73fb      	strb	r3, [r7, #15]
	}

	return state;
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <easyGPIOToggle>:

void easyGPIOToggle(GPIO_TypeDef *GPIO_Group, enum gpio_pin Pin)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	460b      	mov	r3, r1
 80008e4:	807b      	strh	r3, [r7, #2]

	if(easyReadBit(&GPIO_Group->MODER, (Pin+Pin+1)) == 0U && easyReadBit(&GPIO_Group->MODER, (Pin+Pin)) == 1U)
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	887b      	ldrh	r3, [r7, #2]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4619      	mov	r1, r3
 80008f6:	4610      	mov	r0, r2
 80008f8:	f000 f96c 	bl	8000bd4 <easyReadBit>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d11c      	bne.n	800093c <easyGPIOToggle+0x62>
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	887b      	ldrh	r3, [r7, #2]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4619      	mov	r1, r3
 800090e:	4610      	mov	r0, r2
 8000910:	f000 f960 	bl	8000bd4 <easyReadBit>
 8000914:	4603      	mov	r3, r0
 8000916:	2b01      	cmp	r3, #1
 8000918:	d110      	bne.n	800093c <easyGPIOToggle+0x62>
	{
		if(GPIO_Group->ODR)easyGPIOSetState(GPIO_Group, Pin, 0);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d006      	beq.n	8000930 <easyGPIOToggle+0x56>
 8000922:	887b      	ldrh	r3, [r7, #2]
 8000924:	2200      	movs	r2, #0
 8000926:	4619      	mov	r1, r3
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff ff5f 	bl	80007ec <easyGPIOSetState>
		else easyGPIOSetState(GPIO_Group, Pin, 1);
	}

}
 800092e:	e005      	b.n	800093c <easyGPIOToggle+0x62>
		else easyGPIOSetState(GPIO_Group, Pin, 1);
 8000930:	887b      	ldrh	r3, [r7, #2]
 8000932:	2201      	movs	r2, #1
 8000934:	4619      	mov	r1, r3
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff ff58 	bl	80007ec <easyGPIOSetState>
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <easyUSARTConfig>:


//UART

void easyUSARTConfig(USART_TypeDef *USART_Group, GPIO_TypeDef *GPIO_Group, enum gpio_pin Pin_TX, enum gpio_pin Pin_RX)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af02      	add	r7, sp, #8
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	4611      	mov	r1, r2
 8000950:	461a      	mov	r2, r3
 8000952:	460b      	mov	r3, r1
 8000954:	80fb      	strh	r3, [r7, #6]
 8000956:	4613      	mov	r3, r2
 8000958:	80bb      	strh	r3, [r7, #4]

	uint8_t afr_pos_tx, afr_pos_rx;

	easyGPIOConfigFullSet(GPIO_Group, Pin_TX, ALTERNATE_FUNCTION, NOPULL,0,0);
 800095a:	88f9      	ldrh	r1, [r7, #6]
 800095c:	2300      	movs	r3, #0
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	2300      	movs	r3, #0
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2300      	movs	r3, #0
 8000966:	2210      	movs	r2, #16
 8000968:	68b8      	ldr	r0, [r7, #8]
 800096a:	f7ff fdd1 	bl	8000510 <easyGPIOConfigFullSet>
	easyGPIOConfigFullSet(GPIO_Group, Pin_RX, ALTERNATE_FUNCTION, NOPULL,0,0);
 800096e:	88b9      	ldrh	r1, [r7, #4]
 8000970:	2300      	movs	r3, #0
 8000972:	9301      	str	r3, [sp, #4]
 8000974:	2300      	movs	r3, #0
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	2300      	movs	r3, #0
 800097a:	2210      	movs	r2, #16
 800097c:	68b8      	ldr	r0, [r7, #8]
 800097e:	f7ff fdc7 	bl	8000510 <easyGPIOConfigFullSet>

	if(Pin_TX > 7) {
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	2b07      	cmp	r3, #7
 8000986:	d905      	bls.n	8000994 <easyUSARTConfig+0x50>
		afr_pos_tx = 1;
 8000988:	2301      	movs	r3, #1
 800098a:	75fb      	strb	r3, [r7, #23]
		Pin_TX -= 8;
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	3b08      	subs	r3, #8
 8000990:	80fb      	strh	r3, [r7, #6]
 8000992:	e001      	b.n	8000998 <easyUSARTConfig+0x54>
	}
	else afr_pos_tx = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	75fb      	strb	r3, [r7, #23]

	if(Pin_RX > 7) {
 8000998:	88bb      	ldrh	r3, [r7, #4]
 800099a:	2b07      	cmp	r3, #7
 800099c:	d905      	bls.n	80009aa <easyUSARTConfig+0x66>
		afr_pos_rx = 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	75bb      	strb	r3, [r7, #22]
		Pin_RX -= 8;
 80009a2:	88bb      	ldrh	r3, [r7, #4]
 80009a4:	3b08      	subs	r3, #8
 80009a6:	80bb      	strh	r3, [r7, #4]
 80009a8:	e001      	b.n	80009ae <easyUSARTConfig+0x6a>
	}
	else afr_pos_rx = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	75bb      	strb	r3, [r7, #22]




	/** AF 0100 da H7 series **/
	Pin_TX = (4*Pin_TX);
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	80fb      	strh	r3, [r7, #6]
	Pin_RX = (4*Pin_RX);
 80009b4:	88bb      	ldrh	r3, [r7, #4]
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	80bb      	strh	r3, [r7, #4]
	//TX
	easyClearBit(&GPIO_Group->AFR[afr_pos_tx], Pin_TX + 3);
 80009ba:	7dfb      	ldrb	r3, [r7, #23]
 80009bc:	3308      	adds	r3, #8
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	441a      	add	r2, r3
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	3303      	adds	r3, #3
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4619      	mov	r1, r3
 80009ce:	4610      	mov	r0, r2
 80009d0:	f000 f8d5 	bl	8000b7e <easyClearBit>
	easySetBit(&GPIO_Group->AFR[afr_pos_tx], Pin_TX + 2);
 80009d4:	7dfb      	ldrb	r3, [r7, #23]
 80009d6:	3308      	adds	r3, #8
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	441a      	add	r2, r3
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	3302      	adds	r3, #2
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	4619      	mov	r1, r3
 80009e8:	4610      	mov	r0, r2
 80009ea:	f000 f8de 	bl	8000baa <easySetBit>
	easyClearBit(&GPIO_Group->AFR[afr_pos_tx], Pin_TX + 1);
 80009ee:	7dfb      	ldrb	r3, [r7, #23]
 80009f0:	3308      	adds	r3, #8
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	441a      	add	r2, r3
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	3301      	adds	r3, #1
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	4619      	mov	r1, r3
 8000a02:	4610      	mov	r0, r2
 8000a04:	f000 f8bb 	bl	8000b7e <easyClearBit>
	easyClearBit(&GPIO_Group->AFR[afr_pos_tx], Pin_TX);
 8000a08:	7dfb      	ldrb	r3, [r7, #23]
 8000a0a:	3308      	adds	r3, #8
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	4413      	add	r3, r2
 8000a12:	88fa      	ldrh	r2, [r7, #6]
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f8b0 	bl	8000b7e <easyClearBit>

	//RX
	easyClearBit(&GPIO_Group->AFR[afr_pos_rx], Pin_RX + 3);
 8000a1e:	7dbb      	ldrb	r3, [r7, #22]
 8000a20:	3308      	adds	r3, #8
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	68ba      	ldr	r2, [r7, #8]
 8000a26:	441a      	add	r2, r3
 8000a28:	88bb      	ldrh	r3, [r7, #4]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	3303      	adds	r3, #3
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	4619      	mov	r1, r3
 8000a32:	4610      	mov	r0, r2
 8000a34:	f000 f8a3 	bl	8000b7e <easyClearBit>
	easySetBit(&GPIO_Group->AFR[afr_pos_rx], Pin_RX + 2);
 8000a38:	7dbb      	ldrb	r3, [r7, #22]
 8000a3a:	3308      	adds	r3, #8
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	441a      	add	r2, r3
 8000a42:	88bb      	ldrh	r3, [r7, #4]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	3302      	adds	r3, #2
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	f000 f8ac 	bl	8000baa <easySetBit>
	easyClearBit(&GPIO_Group->AFR[afr_pos_rx], Pin_RX + 1);
 8000a52:	7dbb      	ldrb	r3, [r7, #22]
 8000a54:	3308      	adds	r3, #8
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	441a      	add	r2, r3
 8000a5c:	88bb      	ldrh	r3, [r7, #4]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	3301      	adds	r3, #1
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	4619      	mov	r1, r3
 8000a66:	4610      	mov	r0, r2
 8000a68:	f000 f889 	bl	8000b7e <easyClearBit>
	easyClearBit(&GPIO_Group->AFR[afr_pos_rx], Pin_RX);
 8000a6c:	7dbb      	ldrb	r3, [r7, #22]
 8000a6e:	3308      	adds	r3, #8
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	4413      	add	r3, r2
 8000a76:	88ba      	ldrh	r2, [r7, #4]
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 f87e 	bl	8000b7e <easyClearBit>
	/** AF 0100 da H7 series **/


	easyUSARTCheckClock(USART_Group);
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f000 f818 	bl	8000ab8 <easyUSARTCheckClock>

	USART_Group->CR1 = 0x00;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
	easySetBit(&USART_Group->CR1, 0);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f889 	bl	8000baa <easySetBit>
	USART_Group->BRR |= (3 << 0) | (34 << 4);	//baudrate 115200
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	68da      	ldr	r2, [r3, #12]
 8000a9c:	f240 2323 	movw	r3, #547	; 0x223
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	60d3      	str	r3, [r2, #12]
	easySetBit(&USART_Group->CR1, 2);	//REN
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f87d 	bl	8000baa <easySetBit>


}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <easyUSARTCheckClock>:

void easyUSARTCheckClock(USART_TypeDef *USART_Group)	//it enables the gpiogroup clock
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	unsigned int N = sizeof(ref_uart_group)/sizeof(ref_uart_group[0]);
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	60bb      	str	r3, [r7, #8]
	uint8_t i;
	for(i = 0; i < N; i++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]
 8000ac8:	e009      	b.n	8000ade <easyUSARTCheckClock+0x26>
	{
		if(USART_Group == ref_uart_group[i]){
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <easyUSARTCheckClock+0x5c>)
 8000ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d007      	beq.n	8000ae8 <easyUSARTCheckClock+0x30>
	for(i = 0; i < N; i++)
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	3301      	adds	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	68ba      	ldr	r2, [r7, #8]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d8f1      	bhi.n	8000aca <easyUSARTCheckClock+0x12>
 8000ae6:	e000      	b.n	8000aea <easyUSARTCheckClock+0x32>
			break;
 8000ae8:	bf00      	nop
		}
	}
	switch (i){
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <easyUSARTCheckClock+0x3e>
 8000af0:	2b05      	cmp	r3, #5
 8000af2:	d005      	beq.n	8000b00 <easyUSARTCheckClock+0x48>
			easySetBit(&RCC->APB2ENR, 5);
			break;

	}

}
 8000af4:	e009      	b.n	8000b0a <easyUSARTCheckClock+0x52>
			easySetBit(&RCC->APB2ENR, 4);
 8000af6:	2104      	movs	r1, #4
 8000af8:	4807      	ldr	r0, [pc, #28]	; (8000b18 <easyUSARTCheckClock+0x60>)
 8000afa:	f000 f856 	bl	8000baa <easySetBit>
			break;
 8000afe:	e004      	b.n	8000b0a <easyUSARTCheckClock+0x52>
			easySetBit(&RCC->APB2ENR, 5);
 8000b00:	2105      	movs	r1, #5
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <easyUSARTCheckClock+0x60>)
 8000b04:	f000 f851 	bl	8000baa <easySetBit>
			break;
 8000b08:	bf00      	nop
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2400002c 	.word	0x2400002c
 8000b18:	580244f0 	.word	0x580244f0

08000b1c <easyUSARTSendChar>:

void easyUSARTSendChar(USART_TypeDef *USART_Group, uint8_t c)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
	easySetBit(&USART_Group->CR1, 3);	//TEN
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2103      	movs	r1, #3
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f83c 	bl	8000baa <easySetBit>
	USART_Group->TDR = c;
 8000b32:	78fa      	ldrb	r2, [r7, #3]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(USART_Group->ISR & (1<<6)));
 8000b38:	bf00      	nop
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f9      	beq.n	8000b3a <easyUSARTSendChar+0x1e>

}
 8000b46:	bf00      	nop
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <easyUSARTSendString>:

void easyUSARTSendString(USART_TypeDef *USART_Group, char *string)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
	while (*string) easyUSARTSendChar(USART_Group, *string++);
 8000b5a:	e007      	b.n	8000b6c <easyUSARTSendString+0x1c>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	603a      	str	r2, [r7, #0]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ffd8 	bl	8000b1c <easyUSARTSendChar>
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1f3      	bne.n	8000b5c <easyUSARTSendString+0xc>
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <easyClearBit>:




void easyClearBit(__IO uint32_t *REG, uint8_t pos)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	70fb      	strb	r3, [r7, #3]
	*REG &= ~(1UL << pos);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	78fb      	ldrb	r3, [r7, #3]
 8000b90:	2101      	movs	r1, #1
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	401a      	ands	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	601a      	str	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <easySetBit>:

void easySetBit(__IO uint32_t *REG, uint8_t pos)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	70fb      	strb	r3, [r7, #3]
	*REG |= (1UL << pos);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	78fb      	ldrb	r3, [r7, #3]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	601a      	str	r2, [r3, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <easyReadBit>:

uint8_t easyReadBit(__IO uint32_t *REG, uint8_t pos)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	70fb      	strb	r3, [r7, #3]
	uint8_t bit;
	bit = (*REG >> pos) & 1U;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	78fb      	ldrb	r3, [r7, #3]
 8000be6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
	return bit;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <__libc_init_array>:
 8000c00:	b570      	push	{r4, r5, r6, lr}
 8000c02:	4d0d      	ldr	r5, [pc, #52]	; (8000c38 <__libc_init_array+0x38>)
 8000c04:	4c0d      	ldr	r4, [pc, #52]	; (8000c3c <__libc_init_array+0x3c>)
 8000c06:	1b64      	subs	r4, r4, r5
 8000c08:	10a4      	asrs	r4, r4, #2
 8000c0a:	2600      	movs	r6, #0
 8000c0c:	42a6      	cmp	r6, r4
 8000c0e:	d109      	bne.n	8000c24 <__libc_init_array+0x24>
 8000c10:	4d0b      	ldr	r5, [pc, #44]	; (8000c40 <__libc_init_array+0x40>)
 8000c12:	4c0c      	ldr	r4, [pc, #48]	; (8000c44 <__libc_init_array+0x44>)
 8000c14:	f000 f818 	bl	8000c48 <_init>
 8000c18:	1b64      	subs	r4, r4, r5
 8000c1a:	10a4      	asrs	r4, r4, #2
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	42a6      	cmp	r6, r4
 8000c20:	d105      	bne.n	8000c2e <__libc_init_array+0x2e>
 8000c22:	bd70      	pop	{r4, r5, r6, pc}
 8000c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c28:	4798      	blx	r3
 8000c2a:	3601      	adds	r6, #1
 8000c2c:	e7ee      	b.n	8000c0c <__libc_init_array+0xc>
 8000c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c32:	4798      	blx	r3
 8000c34:	3601      	adds	r6, #1
 8000c36:	e7f2      	b.n	8000c1e <__libc_init_array+0x1e>
 8000c38:	08000c6c 	.word	0x08000c6c
 8000c3c:	08000c6c 	.word	0x08000c6c
 8000c40:	08000c6c 	.word	0x08000c6c
 8000c44:	08000c70 	.word	0x08000c70

08000c48 <_init>:
 8000c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c4a:	bf00      	nop
 8000c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c4e:	bc08      	pop	{r3}
 8000c50:	469e      	mov	lr, r3
 8000c52:	4770      	bx	lr

08000c54 <_fini>:
 8000c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c56:	bf00      	nop
 8000c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c5a:	bc08      	pop	{r3}
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	4770      	bx	lr
